[
    {
        "code": "/* Sample TCP server */\n\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <strings.h>\n#include <stdio.h>\n#include <string.h>\n\nchar key[1000];\n\ntypedef struct {\n        char mesg[14];\n        long number;\n        int *ptr_to_n;\n} data;\n\nvoid print_key(struct sockaddr_in cliaddr, int connfd) {\nFILE* keyfile = fopen(\"./key\", \"r\");\nfscanf(keyfile, \"%s\", key);\nsendto(connfd, key, strlen(key), 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr));\n}\n\nint perform_action(struct sockaddr_in cliaddr, int connfd, socklen_t clilen) {\ndata data;\ndata.number = 1;\ndata.ptr_to_n = &data.number;\nchar *himsg = \"Hi, there! What's your name?\\n\";\nint n;\nsendto(connfd, himsg, strlen(himsg), 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr));\nn = recvfrom(connfd, data.mesg, 35, 0, (struct sockaddr *)&cliaddr, &clilen);\nif(data.number == 1179800916 && data.ptr_to_n == 0x5242574f44414853) {\n    print_key(cliaddr, connfd);\n}\nreturn 0;\n}\n\nint main(int argc, char**argv)\n{\nint listenfd,connfd;\nstruct sockaddr_in servaddr,cliaddr;\nsocklen_t clilen;\npid_t     childpid;\n\nlistenfd=socket(AF_INET,SOCK_STREAM,0);\nsetsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &(int){ 1 }, sizeof(int));\n\nbzero(&servaddr,sizeof(servaddr));\nservaddr.sin_family = AF_INET;\nservaddr.sin_addr.s_addr=htonl(INADDR_ANY);\nservaddr.sin_port=htons(32000);\nbind(listenfd,(struct sockaddr *)&servaddr,sizeof(servaddr));\n\nlisten(listenfd,1024);\n\nfor(;;)\n{\n    clilen=sizeof(cliaddr);\n    connfd = accept(listenfd,(struct sockaddr *)&cliaddr,&clilen);\n\n    perform_action(cliaddr, connfd, clilen);\n\n    close(connfd);\n}\n\nclose (listenfd);\n\nreturn 0;\n}\n",
        "assembly": "0000000000000000 <print_key>:\n0: f3 0f 1e fa endbr64\n4: 41 54 push r12\n6: 4c 8d 25 00 00 00 00 lea r12,[rip+0x0] # d <print_key+0xd>\nd: 55 push rbp\ne: 89 d5 mov ebp,edx\n10: 48 83 ec 18 sub rsp,0x18\n14: 48 89 3c 24 mov QWORD PTR [rsp],rdi\n18: 48 8d 3d 00 00 00 00 lea rdi,[rip+0x0] # 1f <print_key+0x1f>\n1f: 48 89 74 24 08 mov QWORD PTR [rsp+0x8],rsi\n24: 48 8d 35 00 00 00 00 lea rsi,[rip+0x0] # 2b <print_key+0x2b>\n2b: e8 00 00 00 00 call 30 <print_key+0x30>\n30: 4c 89 e2 mov rdx,r12\n33: 48 8d 35 00 00 00 00 lea rsi,[rip+0x0] # 3a <print_key+0x3a>\n3a: 48 89 c7 mov rdi,rax\n3d: 31 c0 xor eax,eax\n3f: e8 00 00 00 00 call 44 <print_key+0x44>\n44: 4c 89 e7 mov rdi,r12\n47: e8 00 00 00 00 call 4c <print_key+0x4c>\n4c: 49 89 e0 mov r8,rsp\n4f: 4c 89 e6 mov rsi,r12\n52: 89 ef mov edi,ebp\n54: 48 89 c2 mov rdx,rax\n57: 41 b9 10 00 00 00 mov r9d,0x10\n5d: 31 c9 xor ecx,ecx\n5f: e8 00 00 00 00 call 64 <print_key+0x64>\n64: 48 83 c4 18 add rsp,0x18\n68: 5d pop rbp\n69: 41 5c pop r12\n6b: c3 ret\n6c: 0f 1f 40 00 nop DWORD PTR [rax+0x0]\n\n0000000000000070 <perform_action>:\n70: f3 0f 1e fa endbr64\n74: 41 54 push r12\n76: 41 89 d4 mov r12d,edx\n79: 41 b9 10 00 00 00 mov r9d,0x10\n7f: ba 1d 00 00 00 mov edx,0x1d\n84: 55 push rbp\n85: 53 push rbx\n86: 48 83 ec 40 sub rsp,0x40\n8a: 48 89 7c 24 10 mov QWORD PTR [rsp+0x10],rdi\n8f: 48 8d 5c 24 10 lea rbx,[rsp+0x10]\n94: 44 89 e7 mov edi,r12d\n97: 48 8d 6c 24 20 lea rbp,[rsp+0x20]\n9c: 48 89 74 24 18 mov QWORD PTR [rsp+0x18],rsi\na1: 49 89 d8 mov r8,rbx\na4: 48 8d 35 00 00 00 00 lea rsi,[rip+0x0] # ab <perform_action+0x3b>\nab: 89 4c 24 0c mov DWORD PTR [rsp+0xc],ecx\naf: 31 c9 xor ecx,ecx\nb1: 64 48 8b 04 25 28 00 00 00 mov rax,QWORD PTR fs:0x28\nba: 48 89 44 24 38 mov QWORD PTR [rsp+0x38],rax\nbf: 31 c0 xor eax,eax\nc1: 48 8b 05 00 00 00 00 mov rax,QWORD PTR [rip+0x0] # c8 <perform_action+0x58>\nc8: 48 89 44 24 30 mov QWORD PTR [rsp+0x30],rax\ncd: e8 00 00 00 00 call d2 <perform_action+0x62>\nd2: 48 83 ec 08 sub rsp,0x8\nd6: 45 31 c0 xor r8d,r8d\nd9: 49 89 d9 mov r9,rbx\ndc: 48 8d 44 24 14 lea rax,[rsp+0x14]\ne1: ba 23 00 00 00 mov edx,0x23\ne6: 48 89 ee mov rsi,rbp\ne9: 44 89 e7 mov edi,r12d\nec: 50 push rax\ned: b9 18 00 00 00 mov ecx,0x18\nf2: e8 00 00 00 00 call f7 <perform_action+0x87>\nf7: 58 pop rax\nf8: f2 0f 10 05 00 00 00 00 movsd xmm0,QWORD PTR [rip+0x0] # 100 <perform_action+0x90>\n100: 5a pop rdx\n101: 66 0f 2e 44 24 30 ucomisd xmm0,QWORD PTR [rsp+0x30]\n107: 7a 10 jp 119 <perform_action+0xa9>\n109: 75 0e jne 119 <perform_action+0xa9>\n10b: 48 89 ef mov rdi,rbp\n10e: e8 00 00 00 00 call 113 <perform_action+0xa3>\n113: 48 83 f8 0d cmp rax,0xd\n117: 74 1f je 138 <perform_action+0xc8>\n119: 48 8b 44 24 38 mov rax,QWORD PTR [rsp+0x38]\n11e: 64 48 2b 04 25 28 00 00 00 sub rax,QWORD PTR fs:0x28\n127: 75 23 jne 14c <perform_action+0xdc>\n129: 48 83 c4 40 add rsp,0x40\n12d: 31 c0 xor eax,eax\n12f: 5b pop rbx\n130: 5d pop rbp\n131: 41 5c pop r12\n133: c3 ret\n134: 0f 1f 40 00 nop DWORD PTR [rax+0x0]\n138: 48 8b 7c 24 10 mov rdi,QWORD PTR [rsp+0x10]\n13d: 48 8b 74 24 18 mov rsi,QWORD PTR [rsp+0x18]\n142: 44 89 e2 mov edx,r12d\n145: e8 00 00 00 00 call 14a <perform_action+0xda>\n14a: eb cd jmp 119 <perform_action+0xa9>\n14c: e8 00 00 00 00 call 151 <perform_action+0xe1>\n\nDisassembly of section .text.startup:\n\n0000000000000000 <main>:\n0: f3 0f 1e fa endbr64\n4: 41 55 push r13\n6: 31 d2 xor edx,edx\n8: be 01 00 00 00 mov esi,0x1\nd: bf 02 00 00 00 mov edi,0x2\n12: 41 54 push r12\n14: 55 push rbp\n15: 53 push rbx\n16: 48 83 ec 48 sub rsp,0x48\n1a: 64 48 8b 04 25 28 00 00 00 mov rax,QWORD PTR fs:0x28\n23: 48 89 44 24 38 mov QWORD PTR [rsp+0x38],rax\n28: 31 c0 xor eax,eax\n2a: 4c 8d 6c 24 08 lea r13,[rsp+0x8]\n2f: 4c 8d 64 24 20 lea r12,[rsp+0x20]\n34: e8 00 00 00 00 call 39 <main+0x39>\n39: 48 8d 4c 24 0c lea rcx,[rsp+0xc]\n3e: 41 b8 04 00 00 00 mov r8d,0x4\n44: ba 02 00 00 00 mov edx,0x2\n49: 89 c3 mov ebx,eax\n4b: be 01 00 00 00 mov esi,0x1\n50: 89 c7 mov edi,eax\n52: c7 44 24 0c 01 00 00 00 mov DWORD PTR [rsp+0xc],0x1\n5a: e8 00 00 00 00 call 5f <main+0x5f>\n5f: 66 0f ef c0 pxor xmm0,xmm0\n63: 48 8d 74 24 10 lea rsi,[rsp+0x10]\n68: 89 df mov edi,ebx\n6a: ba 10 00 00 00 mov edx,0x10\n6f: 0f 29 44 24 10 movaps XMMWORD PTR [rsp+0x10],xmm0\n74: c7 44 24 10 02 00 7d 00 mov DWORD PTR [rsp+0x10],0x7d0002\n7c: e8 00 00 00 00 call 81 <main+0x81>\n81: be 00 04 00 00 mov esi,0x400\n86: 89 df mov edi,ebx\n88: e8 00 00 00 00 call 8d <main+0x8d>\n8d: 0f 1f 00 nop DWORD PTR [rax]\n90: 4c 89 ea mov rdx,r13\n93: 4c 89 e6 mov rsi,r12\n96: 89 df mov edi,ebx\n98: c7 44 24 08 10 00 00 00 mov DWORD PTR [rsp+0x8],0x10\na0: e8 00 00 00 00 call a5 <main+0xa5>\na5: 48 8b 7c 24 20 mov rdi,QWORD PTR [rsp+0x20]\naa: 8b 4c 24 08 mov ecx,DWORD PTR [rsp+0x8]\nae: 48 8b 74 24 28 mov rsi,QWORD PTR [rsp+0x28]\nb3: 89 c5 mov ebp,eax\nb5: 89 c2 mov edx,eax\nb7: e8 00 00 00 00 call bc <main+0xbc>\nbc: 89 ef mov edi,ebp\nbe: 31 c0 xor eax,eax\nc0: e8 00 00 00 00 call c5 <main+0xc5>\nc5: eb c9 jmp 90 <main+0x90>\n"
    },
    {
        "code": "int main() { return 42; }",
        "assembly": "main:\n    push   rbp\n    mov    rbp, rsp\n    mov    eax, 0x2a\n    pop    rbp\n    ret"
    },
    {
        "code": "#include <err.h>\n#include <sys/wait.h>\n#include <string.h>\n\n// NO PIPE\n\n#define sz 1024\nchar buff[sz];\n\nint main(void){\n    while(1){\n        if(write(1, \"Enter command:  \", 16) < 0) {err(1, \"cant write prompt\");}\n\n\n    int n = read(0, buff, sz - 1);\n    if(n < 0) {err(1, \"cant read command\");}\n    if(n == 0) {break;}\n    buff[n-1] = '\\0';\n    if(strcmp(buff, \"exit\") == 0) {return 0;}\n\n    pid_t pid = fork();\n    if(pid < 0) {err(1, \"cant fork\");}\n    if(pid == 0) {\n    execlp(buff, buff, (char*)NULL);\n    err(1, \"cant exec\");\n    }\n    if(wait(NULL) < 0) {err(1, \"cant wait\");}\n}\n}",
        "assembly": "Disassembly of section .text.startup:\n\n                0000000000000000 <main>:\n                0:   f3 0f 1e fa             endbr64\n                4:   55                      push   rbp\n                5:   48 8d 2d 00 00 00 00    lea    rbp,[rip+0x0]        # c <main+0xc>\n                c:   53                      push   rbx\n                d:   48 8d 1d 00 00 00 00    lea    rbx,[rip+0x0]        # 14 <main+0x14>\n                14:   48 83 ec 08             sub    rsp,0x8\n                18:   eb 24                   jmp    3e <main+0x3e>\n                1a:   66 0f 1f 44 00 00       nop    WORD PTR [rax+rax*1+0x0]\n                20:   e8 00 00 00 00          call   25 <main+0x25>\n                25:   85 c0                   test   eax,eax\n                27:   0f 88 ae 00 00 00       js     db <main+0xdb>\n                2d:   0f 84 86 00 00 00       je     b9 <main+0xb9>\n                33:   31 ff                   xor    edi,edi\n                35:   e8 00 00 00 00          call   3a <main+0x3a>\n                3a:   85 c0                   test   eax,eax\n                3c:   78 68                   js     a6 <main+0xa6>\n                3e:   ba 10 00 00 00          mov    edx,0x10\n                43:   48 89 de                mov    rsi,rbx\n                46:   bf 01 00 00 00          mov    edi,0x1\n                4b:   e8 00 00 00 00          call   50 <main+0x50>\n                50:   48 85 c0                test   rax,rax\n                53:   78 3e                   js     93 <main+0x93>\n                55:   31 ff                   xor    edi,edi\n                57:   ba ff 03 00 00          mov    edx,0x3ff\n                5c:   48 89 ee                mov    rsi,rbp\n                5f:   e8 00 00 00 00          call   64 <main+0x64>\n                64:   85 c0                   test   eax,eax\n                66:   0f 88 82 00 00 00       js     ee <main+0xee>\n                6c:   74 1c                   je     8a <main+0x8a>\n                6e:   83 e8 01                sub    eax,0x1\n                71:   48 98                   cdqe\n                73:   c6 44 05 00 00          mov    BYTE PTR [rbp+rax*1+0x0],0x0\n                78:   81 7d 00 65 78 69 74    cmp    DWORD PTR [rbp+0x0],0x74697865\n                7f:   75 9f                   jne    20 <main+0x20>\n                81:   80 3d 00 00 00 00 00    cmp    BYTE PTR [rip+0x0],0x0        # 88 <main+0x88>\n                88:   75 96                   jne    20 <main+0x20>\n                8a:   48 83 c4 08             add    rsp,0x8\n                8e:   31 c0                   xor    eax,eax\n                90:   5b                      pop    rbx\n                91:   5d                      pop    rbp\n                92:   c3                      ret\n                93:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 9a <main+0x9a>\n                9a:   bf 01 00 00 00          mov    edi,0x1\n                9f:   31 c0                   xor    eax,eax\n                a1:   e8 00 00 00 00          call   a6 <main+0xa6>\n                a6:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # ad <main+0xad>\n                ad:   bf 01 00 00 00          mov    edi,0x1\n                b2:   31 c0                   xor    eax,eax\n                b4:   e8 00 00 00 00          call   b9 <main+0xb9>\n                b9:   48 89 ee                mov    rsi,rbp\n                bc:   48 89 ef                mov    rdi,rbp\n                bf:   31 d2                   xor    edx,edx\n                c1:   31 c0                   xor    eax,eax\n                c3:   e8 00 00 00 00          call   c8 <main+0xc8>\n                c8:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # cf <main+0xcf>\n                cf:   bf 01 00 00 00          mov    edi,0x1\n                d4:   31 c0                   xor    eax,eax\n                d6:   e8 00 00 00 00          call   db <main+0xdb>\n                db:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # e2 <main+0xe2>\n                e2:   bf 01 00 00 00          mov    edi,0x1\n                e7:   31 c0                   xor    eax,eax\n                e9:   e8 00 00 00 00          call   ee <main+0xee>\n                ee:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # f5 <main+0xf5>\n                f5:   bf 01 00 00 00          mov    edi,0x1\n                fa:   31 c0                   xor    eax,eax\n                fc:   e8 00 00 00 00          call   101 <.LC6+0xb3>"
    },
    {
        "code": "#include <unistd.h>#include <stdlib.h>#include <string.h>#include <stdint.h>#include <sys/wait.h>#include <sys/stat.h>#include <fcntl.h>#include <err.h>#include <time.h>#include <stdio.h> // for snpfintf#include <errno.h>#define sz 128char buff[128];int main(int argc, char* argv[]){  if(argc < 3) {errx(1, \"Usage: SECONDS Q [Q PARAMS]\");}  long seconds = strtol(argv[1], (char**)NULL, 10);  if(errno != 0) {err(1, \"first argument must be digit\");}  if(seconds > 9 || seconds < 0) {errx(1, \"seconds out of range [1-9]\");}  int fd = open(\"run.log\", O_WRONLY | O_TRUNC | O_CREAT, 0644);  if(fd < 0) err(1, \"cannot open/create run.log\");  size_t i = 0;  while(1) {    pid_t pid = fork();    if(pid < 0) {err(1, \"cannot fork (%zu)\", i);}    if(pid == 0){      int fd_ = open(\"/dev/null\", O_WRONLY);      if(fd < 0){err(1, \"cannot open /dev/null\");}      dup2(fd_, 1);      dup2(fd_, 2);      close(fd_);      close(fd);      execvp(argv[2], argv + 2);      err(1, \"canot exec %s\", argv[2]);    }    time_t start = time(NULL);    if(errno != 0) {err(1, \"cannot start time\");}    int status = 0;    int m = waitpid(pid, &status, 0);    if(m < 0) {err(1, \"cannot wait\");}    time_t stop = time(NULL);    if(errno != 0) {err(1, \"cannot stop time\");}    int n = snprintf(buff, sz, \"%ld \", start);    n = write(fd, buff, n);    if(n < 0) {err(1, \"cannot write start time\");}    n = snprintf(buff, sz, \"%ld \", stop);    n = write(fd, buff, n);    if(n < 0) {err(1, \"cannot write start time\");}    int exit = -1;    if(WIFEXITED(status)){      exit = WEXITSTATUS(status);      n = snprintf(buff, sz, \"%d\n\", exit);      n = write(fd, buff, n);      if(n < 0) {err(1, \"cannot write start time\");}    } else if(WIFSIGNALED(status)){      exit = 129;      n = snprintf(buff, sz, \"%d\n\", exit);      n = write(fd, buff, n);      if(n < 0) {err(1, \"cannot write start time\");}    }    if(exit != 0 && stop - start < seconds) {break;}  }}",
        "assembly": "Disassembly of section .text.startup:0000000000000000 <main>:   0:   f3 0f 1e fa             endbr64   4:   41 57                   push   r15   6:   41 56                   push   r14   8:   41 55                   push   r13   a:   41 54                   push   r12   c:   55                      push   rbp   d:   53                      push   rbx   e:   48 83 ec 28             sub    rsp,0x28  12:   48 89 74 24 08          mov    QWORD PTR [rsp+0x8],rsi  17:   64 48 8b 04 25 28 00    mov    rax,QWORD PTR fs:0x28  1e:   00 00  20:   48 89 44 24 18          mov    QWORD PTR [rsp+0x18],rax  25:   31 c0                   xor    eax,eax  27:   83 ff 02                cmp    edi,0x2  2a:   0f 8e 02 03 00 00       jle    332 <main+0x332>  30:   48 8b 44 24 08          mov    rax,QWORD PTR [rsp+0x8]  35:   ba 0a 00 00 00          mov    edx,0xa  3a:   31 f6                   xor    esi,esi  3c:   48 8b 78 08             mov    rdi,QWORD PTR [rax+0x8]  40:   e8 00 00 00 00          call   45 <main+0x45>  45:   49 89 c7                mov    r15,rax  48:   e8 00 00 00 00          call   4d <main+0x4d>  4d:   8b 08                   mov    ecx,DWORD PTR [rax]  4f:   49 89 c6                mov    r14,rax  52:   85 c9                   test   ecx,ecx  54:   0f 85 c5 02 00 00       jne    31f <main+0x31f>  5a:   49 83 ff 09             cmp    r15,0x9  5e:   0f 87 a8 02 00 00       ja     30c <main+0x30c>  64:   ba a4 01 00 00          mov    edx,0x1a4  69:   be 41 02 00 00          mov    esi,0x241  6e:   48 8d 3d 00 00 00 00    lea    rdi,[rip+0x0]        # 75 <main+0x75>  75:   31 c0                   xor    eax,eax  77:   e8 00 00 00 00          call   7c <main+0x7c>  7c:   41 89 c5                mov    r13d,eax  7f:   85 c0                   test   eax,eax  81:   0f 88 c1 02 00 00       js     348 <main+0x348>  87:   48 8d 2d 00 00 00 00    lea    rbp,[rip+0x0]        # 8e <main+0x8e>  8e:   eb 18                   jmp    a8 <main+0xa8>  90:   83 c2 01                add    edx,0x1  93:   80 fa 01                cmp    dl,0x1  96:   0f 8f 6c 01 00 00       jg     208 <main+0x208>  9c:   4c 29 e3                sub    rbx,r12  9f:   4c 39 fb                cmp    rbx,r15  a2:   0f 8c 38 01 00 00       jl     1e0 <main+0x1e0>  a8:   e8 00 00 00 00          call   ad <main+0xad>  ad:   89 c3                   mov    ebx,eax  af:   85 c0                   test   eax,eax  b1:   0f 88 a2 01 00 00       js     259 <main+0x259>  b7:   0f 84 ea 01 00 00       je     2a7 <main+0x2a7>  bd:   31 ff                   xor    edi,edi  bf:   e8 00 00 00 00          call   c4 <main+0xc4>  c4:   41 8b 16                mov    edx,DWORD PTR [r14]  c7:   49 89 c4                mov    r12,rax  ca:   85 d2                   test   edx,edx  cc:   0f 85 c2 01 00 00       jne    294 <main+0x294>  d2:   31 d2                   xor    edx,edx  d4:   48 8d 74 24 14          lea    rsi,[rsp+0x14]  d9:   89 df                   mov    edi,ebx  db:   c7 44 24 14 00 00 00    mov    DWORD PTR [rsp+0x14],0x0  e2:   00  e3:   e8 00 00 00 00          call   e8 <main+0xe8>  e8:   85 c0                   test   eax,eax  ea:   0f 88 91 01 00 00       js     281 <main+0x281>  f0:   31 ff                   xor    edi,edi  f2:   e8 00 00 00 00          call   f7 <main+0xf7>  f7:   48 89 c3                mov    rbx,rax  fa:   41 8b 06                mov    eax,DWORD PTR [r14]  fd:   85 c0                   test   eax,eax  ff:   0f 85 69 01 00 00       jne    26e <main+0x26e> 105:   ba 01 00 00 00          mov    edx,0x1 10a:   be 80 00 00 00          mov    esi,0x80 10f:   48 89 ef                mov    rdi,rbp 112:   31 c0                   xor    eax,eax 114:   4d 89 e1                mov    r9,r12 117:   4c 8d 05 00 00 00 00    lea    r8,[rip+0x0]        # 11e <main+0x11e> 11e:   b9 80 00 00 00          mov    ecx,0x80 123:   e8 00 00 00 00          call   128 <main+0x128> 128:   48 89 ee                mov    rsi,rbp 12b:   44 89 ef                mov    edi,r13d 12e:   48 63 d0                movsxd rdx,eax 131:   e8 00 00 00 00          call   136 <main+0x136> 136:   85 c0                   test   eax,eax 138:   0f 88 08 01 00 00       js     246 <main+0x246> 13e:   ba 01 00 00 00          mov    edx,0x1 143:   be 80 00 00 00          mov    esi,0x80 148:   48 89 ef                mov    rdi,rbp 14b:   31 c0                   xor    eax,eax 14d:   49 89 d9                mov    r9,rbx 150:   4c 8d 05 00 00 00 00    lea    r8,[rip+0x0]        # 157 <main+0x157> 157:   b9 80 00 00 00          mov    ecx,0x80 15c:   e8 00 00 00 00          call   161 <main+0x161> 161:   48 89 ee                mov    rsi,rbp 164:   44 89 ef                mov    edi,r13d 167:   48 63 d0                movsxd rdx,eax 16a:   e8 00 00 00 00          call   16f <main+0x16f> 16f:   85 c0                   test   eax,eax 171:   0f 88 cf 00 00 00       js     246 <main+0x246> 177:   8b 44 24 14             mov    eax,DWORD PTR [rsp+0x14] 17b:   89 c2                   mov    edx,eax 17d:   83 e2 7f                and    edx,0x7f 180:   0f 85 0a ff ff ff       jne    90 <main+0x90> 186:   0f b6 c4                movzx  eax,ah 189:   b9 80 00 00 00          mov    ecx,0x80 18e:   ba 01 00 00 00          mov    edx,0x1 193:   48 89 ef                mov    rdi,rbp 196:   41 89 c1                mov    r9d,eax 199:   89 44 24 04             mov    DWORD PTR [rsp+0x4],eax 19d:   be 80 00 00 00          mov    esi,0x80 1a2:   31 c0                   xor    eax,eax 1a4:   4c 8d 05 00 00 00 00    lea    r8,[rip+0x0]        # 1ab <main+0x1ab> 1ab:   e8 00 00 00 00          call   1b0 <main+0x1b0> 1b0:   48 89 ee                mov    rsi,rbp 1b3:   44 89 ef                mov    edi,r13d 1b6:   48 63 d0                movsxd rdx,eax 1b9:   e8 00 00 00 00          call   1be <main+0x1be> 1be:   44 8b 4c 24 04          mov    r9d,DWORD PTR [rsp+0x4] 1c3:   85 c0                   test   eax,eax 1c5:   78 7f                   js     246 <main+0x246> 1c7:   45 85 c9                test   r9d,r9d 1ca:   0f 84 d8 fe ff ff       je     a8 <main+0xa8> 1d0:   4c 29 e3                sub    rbx,r12 1d3:   4c 39 fb                cmp    rbx,r15 1d6:   0f 8d cc fe ff ff       jge    a8 <main+0xa8> 1dc:   0f 1f 40 00             nop    DWORD PTR [rax+0x0] 1e0:   48 8b 44 24 18          mov    rax,QWORD PTR [rsp+0x18] 1e5:   64 48 2b 04 25 28 00    sub    rax,QWORD PTR fs:0x28 1ec:   00 00 1ee:   0f 85 4f 01 00 00       jne    343 <main+0x343> 1f4:   48 83 c4 28             add    rsp,0x28 1f8:   31 c0                   xor    eax,eax 1fa:   5b                      pop    rbx 1fb:   5d                      pop    rbp 1fc:   41 5c                   pop    r12 1fe:   41 5d                   pop    r13 200:   41 5e                   pop    r14 202:   41 5f                   pop    r15 204:   c3                      ret 205:   0f 1f 00                nop    DWORD PTR [rax] 208:   ba 01 00 00 00          mov    edx,0x1 20d:   be 80 00 00 00          mov    esi,0x80 212:   48 89 ef                mov    rdi,rbp 215:   31 c0                   xor    eax,eax 217:   41 b9 81 00 00 00       mov    r9d,0x81 21d:   4c 8d 05 00 00 00 00    lea    r8,[rip+0x0]        # 224 <main+0x224> 224:   b9 80 00 00 00          mov    ecx,0x80 229:   e8 00 00 00 00          call   22e <main+0x22e> 22e:   ba 04 00 00 00          mov    edx,0x4 233:   48 89 ee                mov    rsi,rbp 236:   44 89 ef                mov    edi,r13d 239:   e8 00 00 00 00          call   23e <main+0x23e> 23e:   85 c0                   test   eax,eax 240:   0f 89 56 fe ff ff       jns    9c <main+0x9c> 246:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 24d <main+0x24d> 24d:   bf 01 00 00 00          mov    edi,0x1 252:   31 c0                   xor    eax,eax 254:   e8 00 00 00 00          call   259 <main+0x259> 259:   31 d2                   xor    edx,edx 25b:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 262 <main+0x262> 262:   bf 01 00 00 00          mov    edi,0x1 267:   31 c0                   xor    eax,eax 269:   e8 00 00 00 00          call   26e <main+0x26e> 26e:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 275 <main+0x275> 275:   bf 01 00 00 00          mov    edi,0x1 27a:   31 c0                   xor    eax,eax 27c:   e8 00 00 00 00          call   281 <main+0x281> 281:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 288 <main+0x288> 288:   bf 01 00 00 00          mov    edi,0x1 28d:   31 c0                   xor    eax,eax 28f:   e8 00 00 00 00          call   294 <main+0x294> 294:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 29b <main+0x29b> 29b:   bf 01 00 00 00          mov    edi,0x1 2a0:   31 c0                   xor    eax,eax 2a2:   e8 00 00 00 00          call   2a7 <main+0x2a7> 2a7:   be 01 00 00 00          mov    esi,0x1 2ac:   48 8d 3d 00 00 00 00    lea    rdi,[rip+0x0]        # 2b3 <main+0x2b3> 2b3:   31 c0                   xor    eax,eax 2b5:   e8 00 00 00 00          call   2ba <main+0x2ba> 2ba:   be 01 00 00 00          mov    esi,0x1 2bf:   89 c5                   mov    ebp,eax 2c1:   89 c7                   mov    edi,eax 2c3:   e8 00 00 00 00          call   2c8 <main+0x2c8> 2c8:   be 02 00 00 00          mov    esi,0x2 2cd:   89 ef                   mov    edi,ebp 2cf:   e8 00 00 00 00          call   2d4 <main+0x2d4> 2d4:   89 ef                   mov    edi,ebp 2d6:   e8 00 00 00 00          call   2db <main+0x2db> 2db:   44 89 ef                mov    edi,r13d 2de:   e8 00 00 00 00          call   2e3 <main+0x2e3> 2e3:   48 8b 5c 24 08          mov    rbx,QWORD PTR [rsp+0x8] 2e8:   48 8b 7b 10             mov    rdi,QWORD PTR [rbx+0x10] 2ec:   48 8d 73 10             lea    rsi,[rbx+0x10] 2f0:   e8 00 00 00 00          call   2f5 <main+0x2f5> 2f5:   48 8b 53 10             mov    rdx,QWORD PTR [rbx+0x10] 2f9:   bf 01 00 00 00          mov    edi,0x1 2fe:   31 c0                   xor    eax,eax 300:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 307 <main+0x307> 307:   e8 00 00 00 00          call   30c <main+0x30c> 30c:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 313 <main+0x313> 313:   bf 01 00 00 00          mov    edi,0x1 318:   31 c0                   xor    eax,eax 31a:   e8 00 00 00 00          call   31f <main+0x31f> 31f:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 326 <main+0x326> 326:   bf 01 00 00 00          mov    edi,0x1 32b:   31 c0                   xor    eax,eax 32d:   e8 00 00 00 00          call   332 <main+0x332> 332:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 339 <main+0x339> 339:   bf 01 00 00 00          mov    edi,0x1 33e:   e8 00 00 00 00          call   343 <main+0x343> 343:   e8 00 00 00 00          call   348 <main+0x348> 348:   48 8d 35 00 00 00 00    lea    rsi,[rip+0x0]        # 34f <main+0x34f> 34f:   bf 01 00 00 00          mov    edi,0x1 354:   31 c0                   xor    eax,eax 356:   e8 00 00 00 00          call   35b <.LC13+0x26e>"
    }
]